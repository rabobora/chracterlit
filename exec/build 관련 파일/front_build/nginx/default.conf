
server {

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

    server_name j10b105.p.ssafy.io; # managed by Certbot

        listen 5173;

        location / {
        root /usr/share/nginx/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm;
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ /index.html;
        }

        # pass PHP scripts to FastCGI server
        #
        #location ~ \.php$ {
        #       include snippets/fastcgi-php.conf;
        #
        #       # With php-fpm (or other unix sockets):
        #       fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
        #       # With php-cgi (or other tcp sockets):
        #       fastcgi_pass 127.0.0.1:9000;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}

    # listen [::]:443 ssl ipv6only=on; # managed by Certbot
    # listen 443 ssl; # managed by Certbot
    # ssl_certificate /etc/letsencrypt/live/j10b105.p.ssafy.io/fullchain.pem; # managed by Certbot
    # ssl_certificate_key /etc/letsencrypt/live/j10b105.p.ssafy.io/privkey.pem; # managed by Certbot
    # include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

server {
    if ($host = j10b105.p.ssafy.io) {
        # return 301 https://$host$request_uri;
        return 301 http://$host$request_uri;
    } # managed by Certbot HTTP 요청이 들어오면 해당 호스트에 대해 HTTPS로 리다이렉션

        listen 80 ;
        listen [::]:80 ;
    server_name j10b105.p.ssafy.io;
    root /usr/share/nginx/html;
    return 404; # managed by Certbot

         location / {
            proxy_pass http://localhost:5173; # 웹 애플리케이션 포트
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        } # 모든 URI에 대해 로컬 호스트의 포트 5173으로 들어오는 요청을 전달
         # Backend Proxy 설정
        # 실제로 바라볼 port
        location /api { # "/api" 경로로 들어오는 요청을 로컬 호스트의 포트 8000에서 실행 중인 API 서버로 전달
            proxy_pass http://localhost:8000/api; # Reverse proxy 설정
            proxy_redirect off; # 응답헤더와 바디에서 프록시 서버의 주소를 변경하지 않음
            charset utf-8;

            proxy_set_header X-Real-IP $remote_addr; # 실제IP주소를 요청헤더에 추가, 엑세스 제어, 로깅 및 분석 수행
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 클라이언트로부터 받은 요청을 다른 서버로 전달
            proxy_set_header X-Forwarded-Proto $scheme; # 통신 프로토콜 식별
            proxy_set_header X-NginX-Proxy true; #원본 요청이 NGINX를 통해 전달되었는지 식별하기 위해서 사용
        }

}
